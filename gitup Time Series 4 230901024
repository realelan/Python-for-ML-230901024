{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fbd8fc5e-40ba-4117-87db-df73e7c6818b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "With this date object, create a series with datetime index:\n",
      " 2020-01-05   -1.364175\n",
      "2020-01-10   -0.580046\n",
      "2020-01-15    0.772500\n",
      "2020-01-20   -0.571346\n",
      "2020-01-25    0.875351\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "\n",
    "dates = [datetime(2020, 1, 5),\n",
    "         datetime(2020, 1, 10),\n",
    "         datetime(2020, 1, 15),\n",
    "         datetime(2020, 1, 20),\n",
    "         datetime(2020, 1, 25)]\n",
    "\n",
    "ts = pd.Series(np.random.randn(5), index=dates)\n",
    "print(\"With this date object, create a series with datetime index:\\n\", ts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9a049cd3-082a-4b36-a8ea-8685fcc819ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Truncate method to truncate datetime series \n",
      " 2020-01-05    1.295572\n",
      "2020-01-10    0.775184\n",
      "2020-01-15    2.270586\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "res = ts.truncate(after=\"1/15/2020\")\n",
    "print(\"Truncate method to truncate datetime series \\n\", res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f056ccbc-e239-4dbe-8e6f-c3c5430af58d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Date range with day periods.\n",
      " DatetimeIndex(['2022-10-02', '2022-10-09', '2022-10-16', '2022-10-23',\n",
      "               '2022-10-30', '2022-11-06', '2022-11-13', '2022-11-20',\n",
      "               '2022-11-27', '2022-12-04'],\n",
      "              dtype='datetime64[ns]', freq='W-SUN')\n"
     ]
    }
   ],
   "source": [
    "da = pd.date_range(\"10/1/2022\", periods=10, freq=\"W-SUN\")\n",
    "print(\"Date range with day periods.\\n\", da)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "acc8b55f-9c7d-46fb-8c1d-75e42e7d4764",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate datetime index:\n",
      " 2020-01-01    0\n",
      "2020-01-02    1\n",
      "2020-01-02    2\n",
      "2020-01-02    3\n",
      "2020-01-03    4\n",
      "dtype: int32\n"
     ]
    }
   ],
   "source": [
    "date = pd.DatetimeIndex([\"1/1/2020\", \"1/2/2020\", \"1/2/2020\", \"1/2/2020\", \"1/3/2020\"])\n",
    "ts1 = pd.Series(np.arange(5), index=date)\n",
    "print(\"Duplicate datetime index:\\n\", ts1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6e5f7dbf-9d81-452c-bb6e-fa1fce5d9d5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Repeated date counts:\n",
      " 2020-01-01    1\n",
      "2020-01-02    3\n",
      "2020-01-03    1\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "group = ts1.groupby(level=0)\n",
    "print(\"Repeated date counts:\\n\", group.count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e1affa3c-6d0c-405f-a18f-3fb5380ac367",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Multi-column DataFrame with datetime index:\n",
      "                    A         B         C         D\n",
      "2022-10-02  0.503473  1.936633  1.098413 -0.770784\n",
      "2022-10-09  0.422997 -0.794103 -1.161473  0.066474\n",
      "2022-10-16 -0.856930 -0.026550  0.221163  0.175127\n",
      "2022-10-23  0.643278  0.377989 -0.809122 -0.926388\n",
      "2022-10-30 -0.616794  0.694242 -0.083798  1.128378\n",
      "2022-11-06 -1.055205 -0.879478 -0.244571  0.280976\n",
      "2022-11-13  1.210215 -1.557205  0.164859 -0.827304\n",
      "2022-11-20 -0.897858  1.825870  0.304720 -0.855928\n",
      "2022-11-27  1.192809  2.351431 -0.488841 -1.022964\n",
      "2022-12-04 -1.082311 -0.020793 -0.555743 -2.448342\n"
     ]
    }
   ],
   "source": [
    "long_df = pd.DataFrame(np.random.randn(10, 4), index=da, columns=list(\"ABCD\"))\n",
    "print(\"Multi-column DataFrame with datetime index:\\n\", long_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5be360e4-007e-4606-8369-f8baf1ec3971",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
